#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
 ProcChiName.py

 Process URL=http://dayabay.ihep.ac.cn/internal/contacts.php
to extract Chinese names and use them in standard author list generation for CPC

 First create file from URL by select-all, cut and paste to file in aquamacs. Save file with utf-8 encoding, ignore errors for now.
20201014 D.Jaffe
 '''
import codecs, sys

class ProcChiName():
    def __init__(self):
        print 'ProcChiName.__init__ Initialized'
        return
    def cleanLine(self,line):
        ''' return line with html stuff replaced with spaces '''
        oldclean = None
        clean = self.rmbtwn(line,'[',']')
        while clean != oldclean :
            oldclean = clean
            clean = self.rmbtwn(clean,'<','>',replacement=' ')
        return clean
    def rmbtwn(self,line,s1,s2, replacement=''):
        ''' return line with line[s1:s2] = replacement '''
        clean = line
        if s1 in clean and s2 in clean :
            i1 = clean.index(s1)
            i2 = i1 + clean[i1:].index(s2)
            clean = clean[:i1] + replacement + clean[i2+1:]
            #print 'ProcChiName.rmbtwn line',line,'clean',clean,'s1,s2,i1,i2',s1,s2,i1,i2
        return clean
    def kludgeLine(self,line):
        ''' kludge to process the line when given name is multiple words'''
        i2 = line.index('&nbsp;')
        i1 = line.rfind('>',0,i2)
        newline = line[:i1] + line[i1:i2].replace(' ','_') + line[i2:]
        return newline
    def bestMatch(self,IndexName,ChineseNames,debug=0):
        '''
        try to find the best match between IndexName from AuthGen and IndexName as generated by this module
        return None if there is no match
        '''
        if debug>0 : print 'ProcChiName.bestMatch input IndexName',IndexName
        cName = None
        iName = None
        if IndexName in ChineseNames:
            cName = ChineseNames[IndexName]
            iName = IndexName
        else:
            for iname in ChineseNames:
                imatch = IndexName.lower()==iname.lower()
                if imatch :
                    cName = ChineseNames[iname]
                    iName = iname
                    break
        if debug>0 : print 'ProcChiName.bestMatch output IndexName,iName,cName',IndexName,iName,cName
        return cName
    def Main(self,hfn = 'http_dayabay.ihep.ac.cn_internal_contacts.php_20201214.html',debug=0):
        '''
        return dict ChineseNames[IndexName] = Chinese name
        where IndexName is formed from family and given name

        input file should be formed by select-all and cut/paste on 
        view-source:http://dayabay.ihep.ac.cn/internal/contacts.php 
        '''

        ChineseNames = {}

        # boring words are not Chinese names, so eliminate them
        boring = ['faculty','postdoc','MS','scientist','staff','engineer','PhD','student']
        boring.extend([ 'Reveco', 'Mandujano', 'Ochoa-Ricoux'])

        # opening the input file this way worked
        infile = codecs.open(hfn,'r', encoding='utf-8', errors='ignore')
        if debug>0 : print 'ProcChiName.Main Opened',hfn

        # process the file.
        # Avoid Temple University and all lines that do not contain familyname
        # apply a kludge, clean up the line by removing all html, then parse the resulting cleaned line.
        # First four items should be Institution Name1 Name2 Chinese_Name/Other
        # Institution is currently ignored
        # Identify Namei as GivenName based on &nbsp; string, other Namei is FamilyName
        # Only add to dict if fourth item is not boring
        for line in infile:
            if 'Temple' in line:
                continue
            elif 'familyname' in line and 'row0' in line:
                if debug>1 : print line[:-1]
                kline = self.kludgeLine(line)
                fixedline = self.cleanLine(kline)
                if debug>0: print 'fixedline',fixedline

                b = fixedline.split()
                c = b[:4]

                ifam,igiv = 1,2
                if '&nbsp;' in c[ifam]:
                    ifam = 2
                    igiv = 1
                FamilyName = c[ifam]
                GivenName  = c[igiv].replace('&nbsp;','')
                IndexName  = str(FamilyName + ' ' + GivenName)
                if len(c)>3: 
                    if c[3]!='' and c[3] not in boring : ChineseNames[IndexName] = c[3].encode('utf-8')
                if debug>0 : print ' '.join(c)

        infile.close()

        if debug>0 : 
            for IndexName in sorted(ChineseNames):
                print IndexName,ChineseNames[IndexName]
        print 'ProcChinName.Main Return dict with',len(ChineseNames),'Chinese names from file',hfn
        return ChineseNames
if __name__ == '__main__' :
    PCN = ProcChiName()
    x = PCN.Main()
