#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
 ProcChiName.py

 Process URL=http://dayabay.ihep.ac.cn/internal/contacts.php
to extract Chinese names and use them in standard author list generation for CPC

 First create file from URL by select-all, cut and paste to file in aquamacs. Save file with utf-8 encoding, ignore errors for now.
20201014 D.Jaffe
 '''
import codecs, sys

class ProcChiName():
    def __init__(self):
        print 'ProcChiName.__init__ Initialized'
        return
    def cleanLine(self,line):
        ''' return line with html stuff replaced with spaces '''
        oldclean = None
        clean = self.rmbtwn(line,'[',']')
        while clean != oldclean :
            oldclean = clean
            clean = self.rmbtwn(clean,'<','>',replacement=' ')
        return clean
    def rmbtwn(self,line,s1,s2, replacement=''):
        ''' return line with line[s1:s2] = replacement '''
        clean = line
        if s1 in clean and s2 in clean :
            i1 = clean.index(s1)
            i2 = i1 + clean[i1:].index(s2)
            clean = clean[:i1] + replacement + clean[i2+1:]
            if self.debug>2 : print 'ProcChiName.rmbtwn line',line,'clean',clean,'s1,s2,i1,i2',s1,s2,i1,i2
        return clean
    def kludgeLine(self,line):
        ''' kludge to process the line when given name is multiple words'''
        i2 = line.index('&nbsp;')
        i1 = line.rfind('>',0,i2)
        newline = line[:i1] + line[i1:i2].replace(' ','_') + line[i2:]
        return newline
    def bestMatch(self,IndexName,ChineseNames,InstList,debug=0):
        '''
        try to find the best match between IndexName from AuthGen and IndexCHI as generated by this module
        use input InstList to resolve cases where there are multiple possible matches for IndexName
        return None if there is no match
        '''
        if debug>0 : print 'ProcChiName.bestMatch input IndexName,InstList',IndexName,InstList
        cName = None
        iName = None
        FixedIN = IndexName
        while len(FixedIN.split())>2 :
            j = FixedIN.rfind(' ')
            FixedIN = FixedIN[:j] + '_' + FixedIN[j+1:]
        for Inst in InstList:
            IndexCHI = IndexName + ' ' + Inst
            IndexCHI = FixedIN   + ' ' + Inst
            if IndexCHI in ChineseNames:
                cName = ChineseNames[IndexCHI]
                iName = IndexCHI
                break
        if cName is None:
            for Inst in InstList:
                indexname = IndexName.lower() + ' ' + Inst.lower()
                indexname = FixedIN.lower()   + ' ' + Inst.lower()
                for iname in ChineseNames:
                    imatch = indexname==iname.lower()
                    if imatch :
                        cName = ChineseNames[iname]
                        iName = iname
                        break
        if debug>0 : print 'ProcChiName.bestMatch output IndexName,FixedIN,iName,cName',IndexName,FixedIN,iName,cName
        return cName
    def byHand(self,ChineseNames):
        '''
        return modified dict ChineseNames after adding some names by hand
        20201222 Thanks to Jianrun HU for his help
        '''
        pairs = [ ['Lu Changguo Princeton', '陆昌国'], ['Li Huiling IHEP' ,'李慧玲']]
        for pair in pairs:
            IndexCHI,cName = pair
            if IndexCHI in ChineseNames:
                print 'ProcChiName.byHand ERROR IndexCHI',IndexCHI,'already in ChineseNames! ChineseNames[IndexCHI]',ChineseNames[IndexCHI] 
                sys.exit('ProcChiName.byHand ERROR')
            ChineseNames[IndexCHI] = cName
        return ChineseNames
    def Main(self,hfn = 'http_dayabay.ihep.ac.cn_internal_contacts.php_20201214.html',debug=0):
        '''
        return dict ChineseNames[IndexCHI] = Chinese name
        where IndexCHI is formed from family, given name and institution

        input file should be formed by select-all and cut/paste on 
        view-source:http://dayabay.ihep.ac.cn/internal/contacts.php 
        '''
        self.debug = debug 
        ChineseNames = {}

        # boring words are not Chinese names, so eliminate them
        boring = ['faculty','postdoc','MS','scientist','staff','engineer','PhD','student']
        boring.extend([ 'Reveco', 'Mandujano', 'Ochoa-Ricoux'])

        
        # opening the input file this way worked (utf-8 didn't completely work, html had charset=gb2312)
        charset = 'utf-8' #'gb2312'
        infile = codecs.open(hfn,'r', encoding=charset, errors='ignore')
        if debug>0 : print 'ProcChiName.Main Opened',hfn

        # process the file.
        # Avoid Temple University cuz difficult to parse
        # Avoid Tadeas Dohnal's line cuz Czech accents difficult to parse
        # Avoid all lines that do not contain familyname
        # apply a kludge, clean up the line by removing all html, then parse the resulting cleaned line.
        # First four items should be Institution Name1 Name2 Chinese_Name/Other
        # Institution used to disambiguate persons with same given and family name
        # Identify Namei as GivenName based on &nbsp; string, other Namei is FamilyName
        # Deal with cases of multiple names for GivenName by replacing blanks with underscore
        # Only add to dict if fourth item is not boring
        for line in infile:
            if 'Temple' in line or 'Dohnal' in line:
                continue
            elif 'familyname' in line and ('row0' in line or 'row1' in line):
                if debug>1 : print 'ProcChiName.Main line[:-1]',line[:-1]
                kline = self.kludgeLine(line)
                fixedline = self.cleanLine(kline)
                if debug>0: print 'ProcChiName.Main fixedline',fixedline

                b = fixedline.split()
                c = b[:4]

                Institution = c[0]
                ifam,igiv = 1,2
                if '&nbsp;' in c[ifam]:
                    ifam = 2
                    igiv = 1
                FamilyName = c[ifam]
                GivenName  = c[igiv].replace('&nbsp;','')
#                GivenName  = GivenName.replace(' ','_')
                IndexCHI  = str(FamilyName + ' ' + GivenName + ' ' + Institution)
                if len(c)>3: 
                    if c[3]!='' and c[3] not in boring :
                        if IndexCHI in ChineseNames:
                            print 'ProcChiName.Main ERROR IndexCHI ',IndexCHI,' already in ChineseNames, damn it! ChineseNames[IndexCHI]',ChineseNames[IndexCHI]
                            sys.exit('ProcChiName.Main ERROR')
                        ChineseNames[IndexCHI] = c[3].encode(charset)
                if debug>0 : print ' '.join(c)

        infile.close()

        ChineseNames = self.byHand(ChineseNames)
        
        if debug>0 : 
            for IndexCHI in sorted(ChineseNames):
                print 'ProcChiName.Main IndexCHI,ChineseNames[IndexCHI],',IndexCHI,ChineseNames[IndexCHI]
        print 'ProcChiName.Main Return dict with',len(ChineseNames),'Chinese names from file',hfn
        return ChineseNames
if __name__ == '__main__' :
    debug = -1
    if len(sys.argv)>1:
        debug = int(sys.argv[1])
    PCN = ProcChiName()
    x = PCN.Main(debug=debug)
